import vmodules from '~/routes/try-online/app/vmodules';
import app from '~/routes/try-online/app';
import fs from 'fs';
import debounce from 'lodash.debounce';

class {
    onCreate() {
        this.state = {
            error: undefined
        };
    }

    onMount() {
        this.styleCode = null;
        this.styleEls = null;

        this.subscribeTo(app).on('file:modified', () => {
            setTimeout(() => {
                this.renderToFrame();
            }, 0);
        });


        this.iframeLoaded = new Promise((resolve, reject) => {
            var iframe = this.iframe = document.createElement('iframe');
            iframe.src = 'about:blank';
            iframe.onload = function() {
                resolve();
            };
            this.getEl('iframeContainer').appendChild(iframe);
        });

        this.renderToFrame();
    }

    renderToFrame() {
        this.iframeLoaded.then(() => {
            var file = this.input.file;

            var templateModule = vmodules.loadFile(file.path);

            if (templateModule.error) {
                this.state.error = undefined;
                this.iframe.contentDocument.body.innerHTML = 'Template failed to load';
                return;
            }

            var template = templateModule.exports;

            this.updateCSS();

            var currentRender = this.currentRender = {};

            this.state.error = undefined;

            Promise.resolve()
                .then(() => {
                    return template.render();
                })
                .then((renderResult) => {
                    if (this.currentRender === currentRender) {
                        renderResult.replaceChildrenOf(this.iframe.contentDocument.body);
                    }
                })
                .catch((err) => {
                    if (this.currentRender === currentRender) {
                        this.iframe.contentDocument.body.innerHTML = '';
                        this.state.error = err;
                    }
                });
        });
    }

    updateCSS() {
        var newStyleCode = '';
        var file = this.input.file;

        var templateModule = vmodules.loadFile(file.path);
        if (templateModule.error) {
            return;
        }

        var template = templateModule.exports;
        var doc = this.iframe.contentDocument;
        if (!template.getDependencies) {
            return;
        }

        var styleCodeList = [];

        var dependencies = template.getDependencies({
                require: vmodules.require,
                resolveFrom: vmodules.resolveFrom
            });
        dependencies.forEach((dependency) => {
            if (dependency.type !== 'css') {
                return;
            }

            var code = dependency.code;
            if (!code) {
                if (dependency.path) {
                    code = fs.readFileSync(dependency.path);
                }
            }

            if (code) {
                newStyleCode += '\n' + code;
                styleCodeList.push(code);
            }
        });

        if (newStyleCode !== this.styleCode) {

            if (this.styleEls) {
                this.styleEls.forEach((styleEl) => {
                    styleEl.parentNode.removeChild(styleEl);
                });
            }

            this.styleCode = newStyleCode;
            this.styleEls = [];

            styleCodeList.forEach((styleCode) => {
                var styleEl = doc.createElement('style')
                styleEl.type = 'text/css'
                styleEl.innerText = styleCode;
                doc.getElementsByTagName('head')[0].appendChild(styleEl);
                this.styleEls.push(styleEl);
            });
        }
    }
}

$ var file = input.file;

<div.preview>
    <div.iframe-container key="iframeContainer" no-update>
    </div>
    <div.errors-container if(state.error)>
        <preview-errors error=state.error file=file/>
    </div>
</div>
