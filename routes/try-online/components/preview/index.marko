import vmodules from '~/routes/try-online/app/vmodules';
import app from '~/routes/try-online/app';
import fs from 'fs';

static {
    function getTemplate(file) {
        var module = vmodules.loadFile(file.path);
        return module.exports;
    }
}

class {
    onMount() {
        this.styleCode = null;
        this.styleEls = null;
        this.renderToFrame();

        this.subscribeTo(app).on('file:modified', () => {
            setTimeout(() => {
                this.renderToFrame();
            }, 0);
        });
    }

    renderToFrame() {
        var file = this.input.file;
        var template = getTemplate(file);

        this.updateCSS();

        var currentRender = this.currentRender = {};

        template.render()
            .then((renderResult) => {
                if (this.currentRender === currentRender) {
                    var frame = this.getEl('frame');
                    renderResult.replaceChildrenOf(frame.contentDocument.body);
                }
            })
            .catch((err) => {
                console.error(err.stack || err);
            })
    }

    updateCSS() {
        var newStyleCode = '';
        var file = this.input.file;
        var template = getTemplate(file);
        var doc = this.getEl('frame').contentDocument;
        if (!template.getDependencies) {
            return;
        }

        var styleCodeList = [];

        var dependencies = template.getDependencies({
                require: vmodules.require,
                resolveFrom: vmodules.resolveFrom
            });
        dependencies.forEach((dependency) => {
            if (dependency.type !== 'css') {
                return;
            }

            var code = dependency.code;
            if (!code) {
                if (dependency.path) {
                    code = fs.readFileSync(dependency.path);
                }
            }

            if (code) {
                newStyleCode += '\n' + code;
                styleCodeList.push(code);
            }
        });

        if (newStyleCode !== this.styleCode) {

            if (this.styleEls) {
                this.styleEls.forEach((styleEl) => {
                    styleEl.parentNode.removeChild(styleEl);
                });
            }

            this.styleCode = newStyleCode;
            this.styleEls = [];

            styleCodeList.forEach((styleCode) => {
                var styleEl = doc.createElement('style')
                styleEl.type = 'text/css'
                styleEl.innerHTML = styleCode;
                doc.getElementsByTagName('head')[0].appendChild(styleEl);
                this.styleEls.push(styleEl);
            });
        }
    }
}

$ var file = input.file;

<div.preview>
    <iframe.frame key="frame"/>
</div>
