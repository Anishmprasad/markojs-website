import app from '~/routes/try-online/app';
import localStorageUtil from '~/util/localstorage';

class {
    onCreate() {
        this.state = {
            unmounted: true
        }
    }

    onMount() {
        // The directory tree is serialized down from the server
        // as part of the state for this component. We want our
        // singleton application instance to have access to the
        // application state
        app.initialize(this.input);

        app.onStateChange((newState) => {
            this.input = newState;
        });

        const focusedFile = localStorageUtil.get('focusedFile') ||
            '/get-started/components/number-spinner';

        app.focusFile(focusedFile);

        this.focusedFile = null;
        this.state.unmounted = false;
    }

    onUpdate() {
        if (this.input.focusedFile !== this.focusedFile) {
            this.focusedFile = this.input.focusedFile;
            app.emit('focus:change', this.input.focusedFile);
        }
    }
}

$ var panes = input.panes;
$ var visibleTabsByPane = input.visibleTabsByPane;

<macro renderPane(paneName)>
    <div class=paneName if(panes[paneName].length)>
        <pane files=panes[paneName]
            focused-file=input.focusedFile
            focused-directory=input.focusedDirectory />
    </div>
</macro>

<div.try-online>
    <try-loader if(input.unmounted)/>
    <div.workspace>
        <div.tree-view-container>
            <tree-view root-dir=input.rootDir />
        </div>
        <div.divider></div>
        <div.editors-container>
            <div.inputs-container>
                <div.divider></div>
                <renderPane('inputTop')/>
                <div.divider if(panes['inputTop'].length && panes['inputBottom'].length)></div>
                <renderPane('inputBottom')/>
                <div.divider></div>
            </div>
            <div.divider></div>
            <div.outputs-container>
                <div.divider></div>
                <renderPane('outputTop')/>
                <div.divider if(panes['outputTop'].length && panes['outputBottom'].length)></div>
                <renderPane('outputBottom')/>
                <div.divider></div>
            </div>
        </div>
    </div>
</div>
